You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI, and Tailwind.

**Code Style and Structure**

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

**Naming Conventions**

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

**TypeScript Usage**

- Use TypeScript for all code; prefer types over interfaces.
- Avoid enums; use maps instead.
- Use functional components with TypeScript types.

**Syntax and Formatting**

- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative TSX.

**UI and Styling**

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a desktop-first approach.

**Performance Optimization**

- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Wrap server components who loadin Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

**Database Querying & Data Model Creation**

- Use Supabase sdk for query database.
- For data model, use [database.generated.types.ts](./src/types/database.generated.types.ts) file.
- Extract supabase query in it's own file in [queries](./src/query) directory.
- Use the createClient() in [server.ts](./src/utils/supabase/server.ts) file when using RSC or server actions.
- Use the database schema in [supabase/db.dump.sql](./supabase/db.dump.sql) file.

**Key Conventions**

- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
- Favor server components and Next.js SSR.
- Use only for Web API access in small components.
- Avoid for data fetching or state management.

**Follow Next.js docs for Data Fetching, Rendering, and Routing.**

**React component syntaxe**

Always use this syntaxe : export const MyComponent = (props: Props) => {}

**PostgresQL**

- Always use valid PostgresQL syntaxe with guillemets for table and columns name.
- Use the database schema in [supabase/db.dump.sql](./supabase/db.dump.sql) file.

** Form & Mutation **

- Use Server Actions for form and mutation, with Next Safe Action, Zod for schema validation, and @next-safe-action/adapter-react-hook-form. You can find actions in [actions](./src/lib/actions) directory.
